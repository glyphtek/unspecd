name: Release and Publish

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version bump type (for manual release)'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
      dry_run:
        description: 'Dry run (do not actually publish)'
        required: false
        default: false
        type: boolean

jobs:
  test:
    name: Test before release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          registry-url: 'https://registry.npmjs.org'

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Run tests
        run: bun test

      - name: Build for Bun
        run: bun run build

      - name: Build for Node.js
        run: npm run build:node

      - name: Lint check
        run: bun run check

      - name: Type check
        run: bunx tsc --noEmit

      - name: Test examples
        run: |
          echo "Testing Unspec'd framework examples..."
          timeout 5s bun run examples/lib/index.ts > /dev/null 2>&1 || true
          echo "âœ… Framework examples tested"

  version-bump:
    name: Version Bump (Manual Release Only)
    runs-on: ubuntu-latest
    needs: test
    if: ${{ github.event_name == 'workflow_dispatch' && !inputs.dry_run }}
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Configure Git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: Bump version
        run: |
          npm version ${{ inputs.version_type }} --no-git-tag-version
          NEW_VERSION=$(node -p "require('./package.json').version")
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV

      - name: Update CHANGELOG
        run: |
          echo "## [$NEW_VERSION] - $(date +%Y-%m-%d)" > temp_changelog.md
          echo "" >> temp_changelog.md
          echo "### Added" >> temp_changelog.md
          echo "- " >> temp_changelog.md
          echo "" >> temp_changelog.md
          echo "### Changed" >> temp_changelog.md
          echo "- " >> temp_changelog.md
          echo "" >> temp_changelog.md
          echo "### Fixed" >> temp_changelog.md
          echo "- " >> temp_changelog.md
          echo "" >> temp_changelog.md
          cat CHANGELOG.md >> temp_changelog.md
          mv temp_changelog.md CHANGELOG.md

      - name: Commit version bump
        run: |
          git add package.json CHANGELOG.md
          git commit -m "chore: bump version to $NEW_VERSION"
          git tag "v$NEW_VERSION"
          git push origin main
          git push origin "v$NEW_VERSION"

  publish-npm:
    name: Publish to NPM
    runs-on: ubuntu-latest
    needs: [test, version-bump]
    if: ${{ always() && needs.test.result == 'success' && (needs.version-bump.result == 'success' || needs.version-bump.result == 'skipped') && !inputs.dry_run }}
    permissions:
      contents: read
      id-token: write # For npm provenance
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          registry-url: 'https://registry.npmjs.org'

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Build for Bun
        run: bun run build

      - name: Build for Node.js
        run: npm run build:node

      - name: Verify package contents
        run: |
          echo "Package contents:"
          ls -la dist/
          echo "Package.json version:"
          node -p "require('./package.json').version"

      - name: Publish to npm
        run: npm publish --access public --provenance
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

  dry-run:
    name: Dry Run Publish
    runs-on: ubuntu-latest
    needs: test
    if: ${{ github.event_name == 'workflow_dispatch' && inputs.dry_run }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          registry-url: 'https://registry.npmjs.org'

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Build for Bun
        run: bun run build

      - name: Build for Node.js
        run: npm run build:node

      - name: Dry run publish
        run: npm publish --dry-run --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: publish-npm
    if: ${{ always() && needs.publish-npm.result == 'success' }}
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Extract version from tag or package.json
        id: version
        run: |
          if [[ "${{ github.event_name }}" == "push" ]]; then
            # Tag-based release
            echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
          else
            # Manual release
            echo "VERSION=$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT
          fi

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.version.outputs.VERSION }}
          release_name: Unspec'd Framework v${{ steps.version.outputs.VERSION }}
          body: |
            ## Unspec'd Framework v${{ steps.version.outputs.VERSION }}
            
            ðŸš€ A new version of the Unspec'd Framework has been released!
            
            ### Features
            - Declarative UI framework for internal tools
            - CLI Mode for rapid prototyping with `unspecd init`, `unspecd dev`, `unspecd exec`
            - Library Mode for embedded applications
            - Multiple content types: `displayRecord`, `editableTable`, `editForm`, `actionButton`, `streamingTable`
            - Auto-discovery of tool files (`*.tool.ts`, `tools/**/*.ts`)
            - Focus mode and enhanced developer experience
            
            ### Installation
            ```bash
            npm install @glyphtek/unspecd
            # or
            bun add @glyphtek/unspecd
            ```
            
            ### Quick Start (CLI Mode)
            ```bash
            npx @glyphtek/unspecd init
            npx @glyphtek/unspecd dev
            ```
            
            ### Quick Start (Library Mode)
            ```typescript
            import { UnspecdUI, startServer } from '@glyphtek/unspecd';
            
            const app = new UnspecdUI({ tools: [myTool] });
            await startServer(app);
            ```
            
            For more information, check out the [documentation](https://github.com/glyphtek/unspecd).
          draft: false
          prerelease: false 